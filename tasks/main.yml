---
# tasks/main.yml

- name: assert all vars are set
  assert: 
    that: "{{ item }} != '' " 
    quiet: true
  with_items:
  - service_name
  - service_volume_name
  - supervision_volume_name
  - service_mount_path
  - supervision_mount_path
  - dlm_replicas
  - dlm_p12_password
  - dlm_application_properties
  - dlm_version
  - aws_access_key
  - aws_secret_key
  - supervision_p12_path
  - nfs_export_path
  - nfs_server_ip

- name: Check if Docker is installed
  command: docker --version
  register: docker_installed
  ignore_errors: yes

- name: Fail if Docker is not installed
  fail:
    msg: "Docker is not installed on this host."
  when: docker_installed.failed

- name: Check if Docker Swarm is initialized
  command: "docker info --format '{% raw %}{{.Swarm.LocalNodeState}}{% endraw %}'"
  register: swarm_status

- name: Fail if Docker Swarm is not initialized
  fail:
    msg: "Docker Swarm is not initialized on this host."
  when: swarm_status.stdout != "active"

- name: Success message
  debug:
    msg: "Docker is installed and Docker Swarm is initialized."
  when: swarm_status.stdout == "active"


## Required dependencies for ansible docker modules.
- name: Make sure pip is installed
  package:
    name: python3-pip
    state: present

- name: Install Docker SDK for Python
  pip:
    name: "{{ item }}"
    state: present
  with_items:
    - certifi==2020.6.20
    - requests==2.24.0
    - docker==4.3.1

- name: login to aws ecr
  shell: "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin {{awsecr_name}}"
  environment:
    AWS_ACCESS_KEY_ID: "{{ lookup('env','aws_access_key') }}"
    AWS_SECRET_ACCESS_KEY: "{{ lookup('env','aws_secret_key') }}"
  become: true

- name: Pull Device Lifecycle Manager image from ecr
  shell: docker pull {{ image_name }}
  become: true

- name: Create Docker volume for service
  docker_volume:
    name: "{{ service_volume_name }}"
    state: present

- name: Create NFS Docker volume for supervision
  docker_volume:
    name: "{{ supervision_volume_name }}"
    driver_options:
      type: "nfs"
      o: "addr={{ nfs_server_ip }},rw"
      device: ":{{ nfs_export_path }}"
    state: present

- name: Create temp file for internet info secrets
  file:
    path: "/tmp/internetInfo"
    state: touch

- name: Write secrets to temp internet info file
  lineinfile:
    path: "/tmp/internetInfo"
    line: "{{ item.key }}={{ item.value }}"
    regexp: "^{{ item.key | replace('.', '\\.') }}="
  with_dict: "{{ dlm_internet_secrets }}"

- name: Create supervision directory on docker host
  file: 
    path: "{{ supervision_mount_path }}"
    state: directory

- name: Copy supervision p12 to docker host
  copy:
    src: "{{ supervision_p12_path }}"
    dest: "/var/lib/docker/volumes/{{ supervision_volume_name }}/_data/SupeVisionCert.p12"

- name: Create file for p12 secret
  copy:
    content: "{{ dlm_p12_password }}"
    dest: "{{ supervision_mount_path }}/p12_password"

- name: Create docker secrets for internet info
  docker_secret:
    name: "maintenance.internet.authentication"
    data_src : "/tmp/internetInfo"
    state: present

- name: Create docker secrets for p12 password
  docker_secret:
    name: "p12.password"
    data_src : "{{ supervision_mount_path }}/p12_password"
    state: present

- name: Deploy the Docker Swarm service
  docker_swarm_service:
    name: "{{ service_name }}"
    image: "{{ image_name }}"
    env:
      SPRING_APPLICATION_JSON: "{{ dlm_application_properties | to_json }}"
    mode: replicated
    replicas: "{{ dlm_replicas }}"
    force_update: true
    update_config:
      parallelism: 1
      delay: 10s
      failure_action: rollback
      monitor: 60s
      order: start-first
    mounts:
      - type: volume
        source: "{{ service_volume_name }}"
        target: "{{ service_mount_path }}"
      - type: volume
        source: "{{ supervision_volume_name }}"
        target: "{{ supervision_mount_path }}"
    secrets:
      - secret_name: "maintenance.internet.authentication"
        filename: "/tmp/internetInfo"
      - secret_name: "p12.password"
        filename: "{{ supervision_mount_path }}/p12_password"

- name: Gather info of Docker Swarm service
  docker_swarm_service_info:
    name: "{{ service_name }}"
  register: swarm_service_info_daas

- name: Debug swarm_service_info_daas
  debug:
    var: swarm_service_info_daas
